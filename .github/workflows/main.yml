name: Deploy to Amazon ECS

on:
  push:
    branches: ["main"] # Trigger deployment on push to main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: plant-analysis-tool
  ECS_SERVICE: plant-analysis-task-service-hrdduqrb
  ECS_CLUSTER: plant-analysis-cluster
  CONTAINER_NAME: plant-analysis-container
  LOG_GROUP: /ecs/plant-analysis-task-service-hrdduqrb

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 4: Ensure CloudWatch log group exists
      - name: Ensure CloudWatch log group exists
        run: |
          LOG_GROUP_EXISTS=$(aws logs describe-log-groups --log-group-name-prefix ${{ env.LOG_GROUP }} --query 'logGroups[0].logGroupName' --output text || echo "NOT_FOUND")
          if [ "$LOG_GROUP_EXISTS" = "NOT_FOUND" ]; then
            echo "Creating log group ${{ env.LOG_GROUP }}"
            aws logs create-log-group --log-group-name ${{ env.LOG_GROUP }}
          else
            echo "Log group ${{ env.LOG_GROUP }} already exists"
          fi

      # Step 5: Build, tag, and push Docker image to Amazon ECR
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }} # Use GitHub SHA for unique image tag
        run: |
          docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # Step 6: Register new ECS task definition
      - name: Register new ECS task definition
        id: register-task-def
        env:
          IMAGE_URI: ${{ steps.build-image.outputs.image }} # This fetches the image URI from the previous step
        run: |
          # Replace <your-account-id> and <region> in task-def.json
          sed "s|<your-account-id>|${{ secrets.AWS_ACCOUNT_ID }}|g" task-def.json | \
          sed "s|<region>|${{ env.AWS_REGION }}|g" | \
          sed "s|<your-account-id>.dkr.ecr.<region>.amazonaws.com/plant-analysis-tool:latest|${IMAGE_URI}|g" > updated-task-def.json

          cat updated-task-def.json

          # Register the new task definition
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://updated-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      # Step 7: Deploy updated ECS service with the new task definition
      - name: Deploy updated ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.TASK_DEF_ARN }} \
            --force-new-deployment

      # Step 8: Monitor deployment (without failing on timeout)
      - name: Monitor deployment progress
        run: |
          echo "Monitoring service deployment progress..."

          # Wait for 30 seconds to let deployment get started
          sleep 30

          # Check deployment status every 30 seconds for up to 5 minutes
          for i in {1..10}; do
            echo "Checking deployment status (attempt $i)..."
            
            # Get service deployment status
            aws ecs describe-services \
              --cluster ${{ env.ECS_CLUSTER }} \
              --services ${{ env.ECS_SERVICE }} \
              --query 'services[0].deployments' \
              --output json
            
            # Get running tasks
            echo "Listing running tasks:"
            TASKS=$(aws ecs list-tasks \
              --cluster ${{ env.ECS_CLUSTER }} \
              --service-name ${{ env.ECS_SERVICE }} \
              --desired-status RUNNING \
              --query 'taskArns' \
              --output text)
            
            if [ -n "$TASKS" ]; then
              echo "Found running tasks: $TASKS"
              
              # Describe the tasks to get their status
              aws ecs describe-tasks \
                --cluster ${{ env.ECS_CLUSTER }} \
                --tasks $TASKS \
                --query 'tasks[*].{TaskArn:taskArn,LastStatus:lastStatus,HealthStatus:healthStatus,StoppedReason:stoppedReason}' \
                --output json
            else
              echo "No running tasks found."
              
              # List stopped tasks to see if any failed
              STOPPED_TASKS=$(aws ecs list-tasks \
                --cluster ${{ env.ECS_CLUSTER }} \
                --service-name ${{ env.ECS_SERVICE }} \
                --desired-status STOPPED \
                --query 'taskArns[0:5]' \
                --output text)
              
              if [ -n "$STOPPED_TASKS" ]; then
                echo "Found stopped tasks. Checking their status:"
                aws ecs describe-tasks \
                  --cluster ${{ env.ECS_CLUSTER }} \
                  --tasks $STOPPED_TASKS \
                  --query 'tasks[*].{TaskArn:taskArn,LastStatus:lastStatus,StoppedReason:stoppedReason}' \
                  --output json
              fi
            fi
            
            # Wait before checking again
            sleep 30
          done

          echo "Deployment monitoring complete. Check the logs for details."
