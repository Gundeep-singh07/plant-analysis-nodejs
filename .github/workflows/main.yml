name: Deploy to Amazon ECS

on:
  push:
    branches: ["main"] # Trigger deployment on push to main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: plant-analysis-tool
  ECS_SERVICE: plant-analysis-task-service-hrdduqrb
  ECS_CLUSTER: plant-analysis-cluster
  CONTAINER_NAME: plant-analysis-container

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Register new ECS task definition
        id: register-task-def
        env:
          IMAGE_URI: ${{ steps.build-image.outputs.image }}
        run: |
          sed "s|<your-account-id>|${{ secrets.AWS_ACCOUNT_ID }}|g" task-def.json | \
          sed "s|<region>|${{ env.AWS_REGION }}|g" | \
          sed "s|<your-account-id>.dkr.ecr.<region>.amazonaws.com/plant-analysis-tool:latest|${IMAGE_URI}|g" > updated-task-def.json

          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://updated-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Deploy updated ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.TASK_DEF_ARN }} \
            --force-new-deployment
